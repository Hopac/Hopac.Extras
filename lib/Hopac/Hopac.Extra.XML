<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Hopac.Extra</name></assembly>
<members>
<member name="T:Hopac.Extra.BoundedMb`1">
<summary>
 Represents a bounded mailbox for many to many communication.
</summary>
</member>
<member name="T:Hopac.Extra.IMap`2">
<summary>
 Write once map or dictionary of key-value pairs.

 This data structure is designed for situations in which one or more writer
 jobs fill a map that one or more reader jobs query.  When a job queries a
 key-value pair, the job is suspended, unless the map already holds the
 key-value pair, and resumed once the map is filled with the queried
 key-value pair.  Once the writers have finished filling the map, the map can
 be explicitly closed, which means that future and pending queries will be
 completed immediately.

 The goal is to allow fine grained concurrency between the writers and the
 readers.  In particular, readers do not need to wait until the map is
 complete, but can instead proceed as soon as their queries can be answered.
 On the other hand, it should be straightforward to make sure that the end
 result is consistent, because filling a write once map is a monotonic
 process: key-value pairs can be added, but not redefined or removed; map can
 be closed, but not reopened.
</summary>
</member>
<member name="T:Hopac.Extra.InCh`1">
<summary>
 A directional input channel.
</summary>
</member>
<member name="T:Hopac.Extra.MChan`1">
<summary>
 Represents a multicast channel for one to many communication.
</summary>
</member>
<member name="T:Hopac.Extra.MPort`1">
<summary>
 Represents a port for listening to a multicast channel.
</summary>
</member>
<member name="T:Hopac.Extra.OutCh`1">
<summary>
 A directional output channel.
</summary>
</member>
<member name="T:Hopac.Extra.SelectableQueue`1">
<summary>
 Represents a selectable buffered queue.
</summary>
</member>
<member name="T:Hopac.Extra.StreamSrc`1">
<summary>
 Represents an imperative source of a stream of values called a stream source.
</summary>
</member>
<member name="T:Hopac.Extra.StreamVar`1">
<summary>
 Represents a mutable variable, called a stream variable, that generates a
 stream of values as a side-effect.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Hopac.Extra.Stream`1">
<summary>
 Represents a point in a non-deterministic stream of values.
</summary>
</member>
<member name="T:Hopac.Extra.Streams`1">
<summary>
 Represents a non-deterministic stream of values called a choice stream.
</summary>
</member>
<member name="T:Hopac.Extra.SwapCh`1">
<summary>
 Synchronous swap channel: when two jobs communicate on a swap channel, each
 sends a value and receives a value.
</summary>
</member>
<member name="M:Hopac.Extra.Alt.wrapAbort``1(Hopac.Job{Microsoft.FSharp.Core.Unit},Hopac.Alt{``0})">
<summary>
 Returns a new alternative that upon picking time makes it so that the
 given job will be started if the given alternative isn&apos;t the one being
 picked.  Note that &quot;wrapAbort&quot; is a derived operation and is implemented
 via &quot;withNack&quot;.
</summary>
</member>
<member name="M:Hopac.Extra.Alt.Infixes.op_LessPlusGreater``2(Hopac.Alt{``0},Hopac.Alt{``1})">
<summary>
 An alternative that is equivalent to first picking either one of the
 given alternatives and then picking the other alternative.  Note that
 this is not the same as picking the alternatives in a single
 transaction.  Such an operation would require a more complex
 synchronization protocol like with the so called Transactional Events.
</summary>
</member>
<member name="T:Hopac.Extra.Alt.Infixes">
<summary>
 Additional infix operators on alternatives.
</summary>
</member>
<member name="T:Hopac.Extra.Alt">
<summary>
 Additional operations on alternatives.
</summary>
</member>
<member name="M:Hopac.Extra.BoundedMb.take``1(Hopac.Extra.BoundedMb{``0})">
<summary>
 Alternative to take a message from a bounded mailbox.
</summary>
</member>
<member name="M:Hopac.Extra.BoundedMb.put``1(Hopac.Extra.BoundedMb{``0},``0)">
<summary>
 Alternative to put a message to a bounded mailbox.
</summary>
</member>
<member name="M:Hopac.Extra.BoundedMb.create``1(System.Int32)">
<summary>
 Creates a new bounded mailbox with a buffer of the specified maximum
 capacity.
</summary>
</member>
<member name="T:Hopac.Extra.BoundedMb">
<summary>
 Operations on bounded mailboxes.
</summary>
</member>
<member name="M:Hopac.Extra.DirCh.give``1(Hopac.Extra.OutCh{``0},``0)">
<summary>
 An alternative to give a value to be taken on the associated input
 channel.
</summary>
</member>
<member name="M:Hopac.Extra.DirCh.take``1(Hopac.Extra.InCh{``0})">
<summary>
 An alternative to take a value to be given on the associated output
 channel.
</summary>
</member>
<member name="M:Hopac.Extra.DirCh.create``1">
<summary>
 Creates a new pair of directional channels.  The created channels are
 associated so that giving a value on the output channel allows the value
 to be taken on the input channel.
</summary>
</member>
<member name="M:Hopac.Extra.DirCh.Now.create``1">
<summary>
 Creates a new pair of directional channels.  The created channels are
 associated so that giving a value on the output channel allows the value
 to be taken on the input channel.
</summary>
</member>
<member name="T:Hopac.Extra.DirCh.Now">
<summary>
 Immediate or non-workflow operations on directional channels.
</summary>
</member>
<member name="T:Hopac.Extra.DirCh">
<summary>
 Operations on directional channels.
</summary>
</member>
<member name="M:Hopac.Extra.IMap.query``2(Hopac.Extra.IMap{``0,``1},``0)">
<summary>
 Returns an alternative that tries to read the value associated with the
 given key.  The alternative becomes enabled once there is some value
 associated with the key in the map or after the map has been closed, in
 which case the result will be none.
</summary>
</member>
<member name="M:Hopac.Extra.IMap.fill``2(Hopac.Extra.IMap{``0,``1},``0,``1)">
<summary>
 Returns a job that adds the given key-value pair to the write once map.
 If the map already has pending queries for the key-value pair, those
 queries will be answered positively.

 It is considered an error if the map already holds a key-value pair with
 the same key.  It is also considered an error if the map has been closed.
</summary>
</member>
<member name="M:Hopac.Extra.IMap.close``2(Hopac.Extra.IMap{``0,``1})">
<summary>
 Returns a job that closes the map and answers pending queries negatively.
</summary>
</member>
<member name="M:Hopac.Extra.IMap.create``2">
<summary>
 Returns a job that creates a new write once map.
</summary>
</member>
<member name="M:Hopac.Extra.IMap.Now.create``2">
<summary>
 Creates a new write once map.
</summary>
</member>
<member name="T:Hopac.Extra.IMap.Now">
<summary>
 Immediate operations on write once maps.
</summary>
</member>
<member name="T:Hopac.Extra.IMap">
<summary>
 Operations on write once maps.
</summary>
</member>
<member name="M:Hopac.Extra.Multicast.recv``1(Hopac.Extra.MPort{``0})">
<summary>
 Alternative to receive a message from the given port.
</summary>
</member>
<member name="M:Hopac.Extra.Multicast.multicast``1(Hopac.Extra.MChan{``0},``0)">
<summary>
 Sends a message to all of the ports listening to the multicast channel.
</summary>
</member>
<member name="M:Hopac.Extra.Multicast.port``1(Hopac.Extra.MChan{``0})">
<summary>
 Creates a new port for listening to the given multicast channel.
</summary>
</member>
<member name="M:Hopac.Extra.Multicast.create``1">
<summary>
 Creates a new multicast channel.
</summary>
</member>
<member name="T:Hopac.Extra.Multicast">
<summary>
 Operations on multicast channels.
</summary>
</member>
<member name="M:Hopac.Extra.SelectableQueue.take``1(Hopac.Extra.SelectableQueue{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})">
<summary>
 Constructs an alternative that takes a message that satisfies the given
 predicate from the specified selectable queue.
</summary>
</member>
<member name="M:Hopac.Extra.SelectableQueue.send``1(Hopac.Extra.SelectableQueue{``0},``0)">
<summary>
 Constructs an alternative that sends the given message to the selectable
 queue.
</summary>
</member>
<member name="M:Hopac.Extra.SelectableQueue.create``1">
<summary>
 Creates a new selectable queue.
</summary>
</member>
<member name="T:Hopac.Extra.SelectableQueue">
<summary>
 Implements a selectable buffered queue similar to what is described in the
 paper &apos;&apos;Kill-Safe Synchronization Abstractions&apos;&apos; by Matthew Flatt and Robert
 Bruce Findler.  Note that Hopac doesn&apos;t, at least not yet, provide all the
 operations on threads necessary to make the abstraction kill-safe as
 described in the paper.  Even without the full kill-safety properties this
 queue can be quite useful and serves as an interesting example of Concurrent
 ML -style programming making use of a dynamic number of alternatives.
</summary>
</member>
<member name="T:Hopac.Extra.Stream.Out`1">
<summary>
 For flexibility, output of stream combinators is represented as action
 job constructors.  Typically the job gives a message on a channel, but
 other actions can also be used.
</summary>
</member>
<member name="T:Hopac.Extra.Stream.In`1">
<summary>
 For flexibility, input to stream combinators is represented as
 alternatives.  Typically the alternative takes a message on a channel, but
 other alternatives can also be used.
</summary>
</member>
<member name="M:Hopac.Extra.Stream.sumWithJob``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Hopac.Alt{``0},Hopac.Alt{``1},Microsoft.FSharp.Core.FSharpFunc{``3,Hopac.Job{Microsoft.FSharp.Core.Unit}})">
<summary>
 Creates a server that maps messages from the given pair of inputs to the
 given output with the given operation.
</summary>
</member>
<member name="M:Hopac.Extra.Stream.sumWithFun``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Hopac.Alt{``0},Hopac.Alt{``1},Microsoft.FSharp.Core.FSharpFunc{``2,Hopac.Job{Microsoft.FSharp.Core.Unit}})">
<summary>
 Creates a server that maps messages from the given pair of inputs to the
 given output with the given operation.
</summary>
</member>
<member name="M:Hopac.Extra.Stream.mapJob``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{``0},Microsoft.FSharp.Core.FSharpFunc{``2,Hopac.Job{Microsoft.FSharp.Core.Unit}})">
<summary>
 Creates a server that maps messages from the given input to the given
 output with the given operation.
</summary>
</member>
<member name="M:Hopac.Extra.Stream.mapFun``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{``0},Microsoft.FSharp.Core.FSharpFunc{``1,Hopac.Job{Microsoft.FSharp.Core.Unit}})">
<summary>
 Creates a server that maps messages from the given input to the given
 output with the given operation.
</summary>
</member>
<member name="M:Hopac.Extra.Stream.iterateJob``2(``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Hopac.Job{Microsoft.FSharp.Core.Unit}})">
<summary>
 Creates a server that iterates the given operation to create a stream of
 messages.
</summary>
</member>
<member name="M:Hopac.Extra.Stream.iterateFun``1(``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0},Microsoft.FSharp.Core.FSharpFunc{``0,Hopac.Job{Microsoft.FSharp.Core.Unit}})">
<summary>
 Creates a server that iterates the given operation to create a stream of
 messages.
</summary>
</member>
<member name="M:Hopac.Extra.Stream.filterJob``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Hopac.Job{Microsoft.FSharp.Core.Unit}})">
<summary>
 Creates a server that forwards those messages from the given input to the
 output that satisfy the given predicate.
</summary>
</member>
<member name="M:Hopac.Extra.Stream.filterFun``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Hopac.Alt{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Hopac.Job{Microsoft.FSharp.Core.Unit}})">
<summary>
 Creates a server that forwards those messages from the given input to the
 output that satisfy the given predicate.
</summary>
</member>
<member name="M:Hopac.Extra.Stream.imp``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,Hopac.Job{Microsoft.FSharp.Core.Unit}},``1})">
<summary>
 Creates a new channel and passes it as the output action to the given
 partially applied stream.
</summary>
</member>
<member name="T:Hopac.Extra.Stream">
<summary>
 Operations for programming with (synchronous) streams.  Both the inputs and
 the outputs of these stream combinators are given explicitly so that
 streams can be combined flexibly.
</summary>
</member>
<member name="M:Hopac.Extra.StreamSrc.tap``1(Hopac.Extra.StreamSrc{``0})">
<summary>
 Returns the remainder of the generated stream after the point in time when
 `tap` is called.
</summary>
</member>
<member name="M:Hopac.Extra.StreamSrc.close``1(Hopac.Extra.StreamSrc{``0})">
<summary>
 Terminates the stream.
</summary>
</member>
<member name="M:Hopac.Extra.StreamSrc.error``1(Hopac.Extra.StreamSrc{``0},System.Exception)">
<summary>
 Terminates the stream with an error.  The given exception is raised in the
 consumers of the stream if and when they reach the end of the stream.
</summary>
</member>
<member name="M:Hopac.Extra.StreamSrc.value``1(Hopac.Extra.StreamSrc{``0},``0)">
<summary>
 Appends a new value to the end of the generated stream.  This operation is
 atomic and can be safely used from multiple parallel jobs.
</summary>
</member>
<member name="M:Hopac.Extra.StreamSrc.create``1">
<summary>
 Creates a new stream source.
</summary>
</member>
<member name="T:Hopac.Extra.StreamSrc">
<summary>
 Operations on stream sources.
</summary>
</member>
<member name="M:Hopac.Extra.StreamVar.tap``1(Hopac.Extra.StreamVar{``0})">
<summary>
 Returns the generated stream, including the current value of the variable,
 from the point in time when `tap` is called.
</summary>
</member>
<member name="M:Hopac.Extra.StreamVar.set``1(Hopac.Extra.StreamVar{``0},``0)">
<summary>
 Sets the value of the variable and appends the value to the end of the
 generated stream.  Note that while this operation is atomic, and can be
 safely used from multiple parallel jobs, a combination of `get` and `set`
 is not atomic.
</summary>
</member>
<member name="M:Hopac.Extra.StreamVar.get``1(Hopac.Extra.StreamVar{``0})">
<summary>
 Gets the value of the variable.
</summary>
</member>
<member name="M:Hopac.Extra.StreamVar.create``1(``0)">
<summary>
 Creates a new stream variable.
</summary>
</member>
<member name="T:Hopac.Extra.StreamVar">
<summary>
 Operations on stream variables.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.single``1(Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.last``1(Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.tails``1(Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.tail``1(Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.head``1(Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.count``1(Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.iterFun``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.iterJob``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.foldFromFun``2(``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.foldFromJob``3(``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.foldFun``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.foldJob``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0,Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.values``1(Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.toSeq``1(Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.afterTimeSpan(System.TimeSpan)">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.atDateTimeOffset(System.DateTimeOffset)">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.atDateTimeOffsets(Hopac.Alt{Hopac.Extra.Stream{System.DateTimeOffset}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.delayEachBy``2(Hopac.Job{``0},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.combineLatest``2(Hopac.Alt{Hopac.Extra.Stream{``0}},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.hold``2(Hopac.Job{``0},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.throttle``2(Hopac.Alt{``0},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.sample``2(Hopac.Alt{Hopac.Extra.Stream{``0}},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.catch``1(Microsoft.FSharp.Core.FSharpFunc{System.Exception,Hopac.Alt{Hopac.Extra.Stream{``0}}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.catchOnce``1(Microsoft.FSharp.Core.FSharpFunc{System.Exception,Hopac.Alt{Hopac.Extra.Stream{``0}}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.switchOn``1(Hopac.Alt{Hopac.Extra.Stream{``0}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.takeUntil``2(Hopac.Alt{``0},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.skipUntil``2(Hopac.Alt{``0},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.take``1(System.Int32,Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.skip``1(System.Int32,Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.switchMap``2(Microsoft.FSharp.Core.FSharpFunc{``0,Hopac.Alt{Hopac.Extra.Stream{``1}}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.appendMap``2(Microsoft.FSharp.Core.FSharpFunc{``0,Hopac.Alt{Hopac.Extra.Stream{``1}}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.mergeMap``2(Microsoft.FSharp.Core.FSharpFunc{``0,Hopac.Alt{Hopac.Extra.Stream{``1}}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.ambMap``2(Microsoft.FSharp.Core.FSharpFunc{``0,Hopac.Alt{Hopac.Extra.Stream{``1}}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.mapJoin``3(Microsoft.FSharp.Core.FSharpFunc{Hopac.Alt{Hopac.Extra.Stream{``0}},Microsoft.FSharp.Core.FSharpFunc{Hopac.Alt{Hopac.Extra.Stream{``1}},Hopac.Alt{Hopac.Extra.Stream{``1}}}},Microsoft.FSharp.Core.FSharpFunc{``2,Hopac.Alt{Hopac.Extra.Stream{``0}}},Hopac.Alt{Hopac.Extra.Stream{``2}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.joinWith``2(Microsoft.FSharp.Core.FSharpFunc{Hopac.Alt{Hopac.Extra.Stream{``0}},Microsoft.FSharp.Core.FSharpFunc{Hopac.Alt{Hopac.Extra.Stream{``1}},Hopac.Alt{Hopac.Extra.Stream{``1}}}},Hopac.Alt{Hopac.Extra.Stream{Hopac.Alt{Hopac.Extra.Stream{``0}}}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.switch``1(Hopac.Alt{Hopac.Extra.Stream{``0}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.append``1(Hopac.Alt{Hopac.Extra.Stream{``0}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.merge``1(Hopac.Alt{Hopac.Extra.Stream{``0}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.amb``1(Hopac.Alt{Hopac.Extra.Stream{``0}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.distinctUntilChangedByFun``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.distinctUntilChangedByJob``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.distinctUntilChangedWithFun``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.distinctUntilChangedWithJob``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.distinctByFun``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.distinctByJob``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.scanFromFun``2(``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.scanFromJob``3(``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.scanFun``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.scanJob``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0,Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.zip``2(Hopac.Alt{Hopac.Extra.Stream{``0}},Hopac.Alt{Hopac.Extra.Stream{``1}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.groupByFun``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.groupByJob``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.mapFun``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.mapJob``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.filterFun``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.filterJob``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.choose``1(Hopac.Alt{Hopac.Extra.Stream{Microsoft.FSharp.Core.FSharpOption{``0}}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.chooseFun``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.chooseJob``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.toObservable``1(Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.subscribingTo``3(System.IObservable{``0},Microsoft.FSharp.Core.FSharpFunc{Hopac.Alt{Hopac.Extra.Stream{``0}},``1})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.iterateFun``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.iterateJob``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.unfoldFun``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.unfoldJob``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.repeatJobs``2(Hopac.Job{``0},Hopac.Job{``1})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.onceJob``1(Hopac.Job{``0})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.foreverJob``1(Hopac.Job{``0})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.ofSeq``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Preliminary and subject to change.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.one``1(``0)">
<summary>
 `one x` is equivalent to `cons x nil`.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.cons``1(``0,Hopac.Alt{Hopac.Extra.Stream{``0}})">
<summary>
 `cons x xs` constructs a choice stream whose first value is `x` and the
 rest of the stream is like `xs`.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.nil``1">
<summary>
 An empty or closed choice stream.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.error``1(System.Exception)">
<summary>
 Constructs a choice stream that is closed with an error.
</summary>
</member>
<member name="M:Hopac.Extra.Streams.never``1">
<summary>
 A choice stream that never produces any values and never closes.
</summary>
</member>
<member name="T:Hopac.Extra.Streams">
<summary>
 Operations on choice streams.
</summary>
</member>
<member name="M:Hopac.Extra.SwapCh.swap``1(Hopac.Extra.SwapCh{``0},``0)">
<summary>
 Alternative to swap values with another job.
</summary>
</member>
<member name="M:Hopac.Extra.SwapCh.create``1">
<summary>
 Creates a new swap channel.
</summary>
</member>
<member name="M:Hopac.Extra.SwapCh.Now.create``1">
<summary>
 Creates a new swap channel.
</summary>
</member>
<member name="T:Hopac.Extra.SwapCh.Now">
<summary>
 Immediate or non-workflow operations on swap channels.
</summary>
</member>
<member name="T:Hopac.Extra.SwapCh">
<summary>
 Operations on swap channels.
</summary>
</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
